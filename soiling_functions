import pandas as pd
from scipy.optimize import curve_fit
import numpy as np
import pv_soiling as soiling
import scipy.stats as st

def piecewise_linear(x, x0, b, k1, k2):
    cond_list=[x<x0, x>=x0]
    func_list=[lambda x: k1*x+b, lambda x: k1*x+b+k2*(x-x0)]
    return np.piecewise(x, cond_list, func_list)

def segmented_soiling_period(pr, cleaning_with_previous=False, fill_method='bfill',
                         days_clean_vs_cp=7, initial_guesses=[7, 1,0,0],
                         bounds=None, min_r2=0.1):
    """
    Applies segmented regression to a single deposition period (data points in between two cleaning events). 
    Segmentation is neglected if change point occurs within a number of days (days_clean_vs_cp) of the cleanings.

    Parameters
    ----------
    pr : 
        Series of daily performance ratios measured during the given deposition period.
    fill_method : str (default='bfill')
        Method to employ to fill any missing day.
    days_clean_vs_cp : numeric (default=7)
        Minimum number of days accepted between cleanings and change points. 
    bounds : numeric (default=None)
        List of bounds for fitting function. If not specified, they are defined in the function.
    initial_guesses : numeric (default=0.1)
        List of initial guesses for fitting function
    min_r2 : numeric (default=0.1)
        Minimum R2 to consider valid the extracted soiling profile.
        
    Returns
    -------
    sr: numeric
        Series containing the daily soiling ratio values after segmentation.
        List of nan if segmentation was not possible.
    cp_date: datetime
        Datetime in which continuous change points occurred.
        None if segmentation was not possible.
    """        
    #Check if PR dataframe has datetime index
    if not isinstance(pr.index, pd.DatetimeIndex):
        raise ValueError('The time series does not have DatetimeIndex')
    
    #Add missing dates
    idx = [pd.to_datetime(str(xi)) for xi in pd.period_range(pr.index[0], pr.index[-1])]
    pr=pr.reindex(idx, method=fill_method)
        
    #Define bounds if not provided
    if bounds==None:
        bounds=[(0,0,-np.inf, -np.inf),(len(pr),1,0,+np.inf)]
     
    y=pr.values  
    x=np.arange(0.,len(y))
    #Fit soiling profile with segmentation
    p,e = curve_fit(piecewise_linear, x, y, p0=initial_guesses, bounds=bounds)
    
    #Ignore change point if too close to a cleaning
    #Change point p[0] converted to integer to extract a date. None if no change point is found.
    if p[0]>days_clean_vs_cp and p[0]<len(y)-days_clean_vs_cp: 
        z=piecewise_linear(x,*p)
        cp_date=int(p[0])
    else: 
        z=[np.nan]*len(x)
        cp_date=None
      
    #Modelled Profile not valid if r2<min_r2
    if st.linregress(y,z)[2]**2<min_r2: 
        z=[np.nan]*len(x) 
        cp_date=None
    
    #Create Series from modelled profile
    sr=pd.Series(z, index=pr.index)
    
    return sr, cp_date
